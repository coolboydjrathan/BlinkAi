rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if the requesting user is the owner
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Rules for the 'conversations' collection
    match /conversations/{conversationId} {
      // Any authenticated user can create a new conversation for themselves
      allow create: if isOwner(request.resource.data.userId);

      // Only the owner can get a single conversation document
      allow get: if isOwner(resource.data.userId);

      // An authenticated user can list conversations, but the app's query
      // MUST restrict this to their own conversations.
      allow list: if request.auth != null;

      // Only the owner can update a conversation (e.g., the title)
      allow update: if isOwner(resource.data.userId);

      // Deleting conversations is not allowed
      allow delete: if false;

      // Rules for the 'messages' subcollection
      match /messages/{messageId} {
        // Checks if the user owns the parent conversation
        function isConversationOwner() {
          return get(/databases/$(database)/documents/conversations/$(conversationId)).data.userId == request.auth.uid;
        }

        // Allow reading and writing messages only if the user owns the conversation
        allow read, write: if isConversationOwner();
      }
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // A user can read, create, or update their own user document
      allow get, create, update: if isOwner(userId);
       // Listing all users or deleting users is not allowed
      allow list, delete: if false;
    }
  }
}
